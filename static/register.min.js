var app = new Vue({ el: "#app", data: { username: "", password: "", passwordCheck: "", firstName: "", lastName: "", email: "", translationAreas: {}, otherTranslationAreas: "", nativeLanguage1: 0, nativeLanguage2: 0, sourceLanguage: 0, targetLanguage: 0, highlightMandatoryFields: !1, resumeUploadStatus: "Upload a file of maximum 5 MB", resumeFileID: "", resumeFileName: "", languagePairs: [], isPhoneInterpreter: !1, isVideoInterpreter: !1, errors: [], responseError: "", didSucceed: !1, isRegisterButtonDisabled: !1, languages: "LANGUAGES_DATA" }, mounted() { $(".ui.dropdown").dropdown(), $(".ui.checkbox").checkbox() }, computed: { isEmailValid() { return /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(this.email) }, isAddLanguagePairButtonEnabled() { if (!this.sourceLanguage || !this.targetLanguage) return !1; if (this.sourceLanguage === this.targetLanguage) return !1; for (let e of this.languagePairs) if (e.sourceLanguage.PK === this.sourceLanguage && e.targetLanguage.PK === this.targetLanguage) return !1; return !0 } }, methods: { selectTranslationArea(e) { this.translationAreas[e] ? this.translationAreas[e] = !1 : this.translationAreas[e] = !0 }, selectPhoneInterpreting() { this.isPhoneInterpreter = !this.isPhoneInterpreter }, selectVideoInterpreting() { this.isVideoInterpreter = !this.isVideoInterpreter }, addLanguagePair() { let e, s; for (let a of this.languages) a.PK === this.sourceLanguage && (e = a), a.PK === this.targetLanguage && (s = a); if (e && s && e !== s) { this.sourceLanguage = 0, this.targetLanguage = 0, $("#dropdown-source-language").dropdown("clear"), $("#dropdown-target-language").dropdown("clear"); for (let a of this.languagePairs) if (a.sourceLanguage.PK === e.PK && a.targetLanguage.PK === s.PK) return; this.languagePairs.push({ sourceLanguage: e, targetLanguage: s, id: 1e3 * e.PK + s.PK }) } }, removeLanguagePair(e, s) { for (let a = 0; a < this.languagePairs.length; a++) { const t = this.languagePairs[a]; if (t.id === 1e3 * e + s) { this.languagePairs.splice(a, 1); break } } }, selectResumeFile() { $("#resume-input").click() }, uploadResume(e) { const s = [...e.srcElement.files], a = s[0]; if (!a) return; this.resumeFileID = Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10), this.resumeFileName = a.name; const t = { id: this.resumeFileID, fileName: a.name }, r = new FormData; r.append("FileInfo", JSON.stringify(t)), r.append("File", a); const i = new XMLHttpRequest; i.upload.addEventListener("progress", e => { if (!e.lengthComputable) return; const s = Math.round(e.loaded / e.total * 100); this.resumeUploadStatus = s >= 100 ? "Upload complete" : `Uploading... ${s} done` }, !1), i.open("POST", "https://translators.tranwise.com/Register/Resume", !0), i.send(r), $("#resume-input").val("") }, register() { if (this.addLanguagePair(), this.errors.splice(0), [this.username, this.password, this.passwordCheck, this.firstName, this.lastName, this.email].includes("") && this.errors.push("Fill in all the mandatory fields"), this.username.length > 50 && this.errors.push("Choose a username of maximum 50 characters"), this.password.length > 50 && this.errors.push("Choose a password of maximum 50 characters"), /^[0-9a-zA-Z._@-]{0,50}$/.test(this.username) || this.errors.push("The username should contain only letters, numbers and the following characters: _ . @ -"), this.email && !this.isEmailValid && this.errors.push("Type a valid email address"), this.nativeLanguage1 || this.errors.push("Select your native language"), this.languagePairs.length || this.errors.push("Add at least one language pair"), this.password && this.passwordCheck && this.password != this.passwordCheck && this.errors.push("The two passwords do not match"), this.password === this.passwordCheck && this.password.length < 8 && this.errors.push("Choose a password of at least 8 characters"), this.errors.length) return void (this.highlightMandatoryFields = !0); this.isRegisterButtonDisabled = !0, this.responseError = ""; const e = { username: this.username, password: this.password, firstName: this.firstName, lastName: this.lastName, email: this.email, nativeLanguage1: parseInt(this.nativeLanguage1, 10), nativeLanguage2: parseInt(this.nativeLanguage2, 10), isPhoneInterpreter: this.isPhoneInterpreter ? 1 : 0, isVideoInterpreter: this.isVideoInterpreter ? 1 : 0, otherTranslationAreas: this.otherTranslationAreas, translationAreas: [], languagePairs: [], resumeFileName: this.resumeFileName, resumeFileID: this.resumeFileID }; for (let [s, a] of Object.entries(this.translationAreas)) a && e.translationAreas.push(parseInt(s, 10)); for (let s of this.languagePairs) e.languagePairs.push({ from: parseInt(s.sourceLanguage.PK, 10), to: parseInt(s.targetLanguage.PK, 10) }); axios({ method: "post", url: "https://translators.tranwise.com/Register/", data: e }).then(e => { "SUCCESS" != e.data ? (this.responseError = e.data, this.isRegisterButtonDisabled = !1) : this.didSucceed = !0 }).catch(e => { this.responseError = "There was an error submitting the form. Please try again.", this.isRegisterButtonDisabled = !1 }) }, chat() { window.open("https://www.universal-translation-services.com/support/")}}});